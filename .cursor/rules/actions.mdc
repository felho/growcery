---
description: Server actions standards
globs: src/server/actions/**/*
alwaysApply: false
---
# Server Actions Guidelines

## Server Actions Standards

- **Actions must never access the database directly.**
- All database operations (read, write, update, delete) must be implemented in the `queries` directory.
- Actions should only call query functions to perform data access or mutations.
- Actions are responsible for:
  - Handling authentication and authorization
  - Orchestrating business logic
  - Calling one or more query functions as needed
- This separation ensures a clear boundary between business logic (actions) and data access (queries).

## Organization
- Location: All server actions must be in `server/actions/`
- Structure: One file per entity (e.g., `users.ts`, `products.ts`)
- Don't use nested folder, for example, comp-matrix-levels related actions should go into the comp-matrix-levels folder and not into the comp-matrix/levels

## Implementation
- Purpose: Wrap server-side mutations using `next-safe-action`
- Validation: Use Zod schemas from `~/zod-schemas/`
- Dependencies: Import from corresponding `queries` modules

## Example Structure
```typescript
import { action } from "~/lib/safe-action";
import { createUserSchema } from "~/zod-schemas/users";
import { createUser } from "~/server/queries/users";

export const createUserAction = action(
  createUserSchema,
  async ({ data }) => {
    // Perform operation
    return createUser(data);
  }
);
```

## Server Actions Consistency Rules

When creating or updating server actions, always follow these standards:

1. **Use the local `actionClient` utility from `~/lib/safe-action`**
   - Do **not** use `action` from `next-safe-action` directly.

2. **Follow the `.metadata()`, `.schema()`, and `.action()` chaining pattern**
   - Ensures consistent error handling and validation.

3. **For form actions, use the `*SchemaFromForm` Zod schema**
   - Only use the full schema (with server-only fields) for server-side actions.

4. **Inject all server-only fields (e.g., `organizationId`) inside the action, not from the client**
   - Use helpers like `getCurrentUserOrgId()` within the action.

5. **Always use `flattenValidationErrors` for error shape**
   - Provides a consistent error structure for the client.

6. **Import types and queries from the local entityâ€™s `index.ts` or query module**
   - Never import types directly from the schema or Zod files for query results.

7. **Always perform an explicit auth check, either in the action or in the query**
   - Never assume the query or action is public.

8. **Explicitly type the return value of your action if returning data**
   - Ensures type safety and clarity for consumers.