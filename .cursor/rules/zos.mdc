---
description: 
globs: src/zod-schemas/**/*.ts
alwaysApply: false
---
## Zod Schema Consistency Rules

## Types and Schemas
- Location: Place all Zod schemas in `zod-schemas/` directory
- Structure: One file per entity (e.g., `comp-matrix.ts`, `users.ts`)
- Organization: Keep all schemas for an entity in a single file
  - Include create, update, and other operation schemas in the same file
  - Use descriptive names for different schemas (e.g., `createCompMatrixSchema`, `updateCompMatrixSchema`)
  - Export all schemas and their types from the same file

When creating or updating Zod schema files, always follow these standards:

1. **Define a `baseFields` object for shared field validation**
   - Use this for both insert and update schemas to avoid duplication.

2. **Export both “FromForm” and “Server” schema variants**
   - Use `*SchemaFromForm` for client-side/form validation (no server-only fields).
   - Use the full schema (with server-only fields like `organizationId`) for server-side actions.

3. **Always export TypeScript types for each schema**
   - Use `z.infer<typeof ...>` for each exported schema.
   - Name types clearly, e.g., `InsertUserArchetypeInputFromForm`, `UpdateUserArchetypeInput`.

4. **For update schemas, always require an `id` field**
   - Use `.object({ id: z.number().int() })` and merge with `baseFields`.

5. **For server-side update schemas, include all required server-only fields**
   - E.g., `.object({ id: z.number().int(), organizationId: z.number().int() })`.

6. **Keep naming and structure consistent with other entity schemas**
   - Follow the pattern in `function.ts` and other established Zod files.

7. **Document which schema is for form/client use and which is for server use**
   - Add comments like: `// organizationId is only added on the server side`.
