---
description: Authentication and authorization guidelines
alwaysApply: true
---

# Authentication Standards

## General Principles
- Auth Strategy: Explicit auth check in every query and action
- Implementation: Use `auth()` or `requireUserId()` to guard access

## Access Control Patterns
- Always validate permissions before returning or modifying data
- Use role-based permissions for granular access control
- Include auth checks at the beginning of every server function

## Example Usage
```typescript
import { auth, requireUserId } from "~/lib/auth";

// For queries that can work with unauthenticated users (with limited access)
export const getPublicItems = async () => {
  const { userId } = await auth();
  // Return different results based on authentication status
  if (userId) {
    // Authenticated user view
    return db.query.items.findMany({ where: ... });
  } else {
    // Public view (limited)
    return db.query.items.findMany({ where: { isPublic: true } });
  }
};

// For operations requiring authentication
export const createItem = async (data) => {
  // Will throw if not authenticated
  const userId = await requireUserId();
  
  return db.query.items.create({
    data: {
      ...data,
      createdById: userId
    }
  });
};
```